[{"categories":null,"contents":" Hello World A sample go program is show here.\npackage main import \u0026#34;fmt\u0026#34; func main() { message := greetMe(\u0026#34;world\u0026#34;) fmt.Println(message) } func greetMe(name string) string { return \u0026#34;Hello, \u0026#34; + name + \u0026#34;!\u0026#34; } Run the program as below:\n$ go run hello.go Variables Normal Declaration:\nvar msg string msg = \u0026#34;Hello\u0026#34; Shortcut:\nmsg := \u0026#34;Hello\u0026#34; Constants const Phi = 1.618 ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://Ginger-Tec.github.io/notes/go/basic/introduction/","summary":" Hello World A sample go program is show here.\npackage main import \u0026#34;fmt\u0026#34; func main() { message := greetMe(\u0026#34;world\u0026#34;) fmt.Println(message) } func greetMe(name string) string { return \u0026#34;Hello, \u0026#34; + name + \u0026#34;!\u0026#34; } Run the program as below:\n$ go run hello.go Variables Normal Declaration:\nvar msg string msg = \u0026#34;Hello\u0026#34; Shortcut:\nmsg := \u0026#34;Hello\u0026#34; Constants const Phi = 1.618 ","tags":null,"title":"Introduction"},{"categories":null,"contents":" Strings str := \u0026#34;Hello\u0026#34; Multiline string\nstr := `Multiline string` Numbers Typical types\nnum := 3 // int num := 3. // float64 num := 3 + 4i // complex128 num := byte(\u0026#39;a\u0026#39;) // byte (alias for uint8) Other Types\nvar u uint = 7 // uint (unsigned) var p float32 = 22.7 // 32-bit float Arrays // var numbers [5]int numbers := [...]int{0, 0, 0, 0, 0} Pointers func main () { b := *getPointer() fmt.Println(\u0026#34;Value is\u0026#34;, b) func getPointer () (myPointer *int) { a := 234 return \u0026amp;a a := new(int) *a = 234 Pointers point to a memory location of a variable. Go is fully garbage-collected.\nType Conversion i := 2 f := float64(i) u := uint(i) Slice slice := []int{2, 3, 4} slice := []byte(\u0026#34;Hello\u0026#34;) ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://Ginger-Tec.github.io/notes/go/basic/types/","summary":"Strings str := \u0026#34;Hello\u0026#34; Multiline string\nstr := `Multiline string` Numbers Typical types\nnum := 3 // int num := 3. // float64 num := 3 + 4i // complex128 num := byte(\u0026#39;a\u0026#39;) // byte (alias for uint8) Other Types\nvar u uint = 7 // uint (unsigned) var p float32 = 22.7 // 32-bit float Arrays // var numbers [5]int numbers := [...]int{0, 0, 0, 0, 0} Pointers func main () { b := *getPointer() fmt.","tags":null,"title":"Basic Types"},{"categories":null,"contents":" Condition if day == \u0026#34;sunday\u0026#34; || day == \u0026#34;saturday\u0026#34; { rest() } else if day == \u0026#34;monday\u0026#34; \u0026amp;\u0026amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(\u0026#34;Uh oh\u0026#34;) Switch switch day { case \u0026#34;sunday\u0026#34;: // cases don\u0026#39;t \u0026#34;fall through\u0026#34; by default! fallthrough case \u0026#34;saturday\u0026#34;: rest() default: work() } Loop for count := 0; count \u0026lt;= 10; count++ { fmt.Println(\u0026#34;My counter is at\u0026#34;, count) } entry := []string{\u0026#34;Jack\u0026#34;,\u0026#34;John\u0026#34;,\u0026#34;Jones\u0026#34;} for i, val := range entry { fmt.Printf(\u0026#34;At position %d, the character %s is present\\n\u0026#34;, i, val) n := 0 x := 42 for n != x { n := guess() } ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://Ginger-Tec.github.io/notes/go/basic/flow-control/","summary":"Condition if day == \u0026#34;sunday\u0026#34; || day == \u0026#34;saturday\u0026#34; { rest() } else if day == \u0026#34;monday\u0026#34; \u0026amp;\u0026amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(\u0026#34;Uh oh\u0026#34;) Switch switch day { case \u0026#34;sunday\u0026#34;: // cases don\u0026#39;t \u0026#34;fall through\u0026#34; by default! fallthrough case \u0026#34;saturday\u0026#34;: rest() default: work() } Loop for count := 0; count \u0026lt;= 10; count++ { fmt.Println(\u0026#34;My counter is at\u0026#34;, count) } entry := []string{\u0026#34;Jack\u0026#34;,\u0026#34;John\u0026#34;,\u0026#34;Jones\u0026#34;} for i, val := range entry { fmt.","tags":null,"title":"Flow Control"},{"categories":null,"contents":" Condition if day == \u0026#34;sunday\u0026#34; || day == \u0026#34;saturday\u0026#34; { rest() } else if day == \u0026#34;monday\u0026#34; \u0026amp;\u0026amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(\u0026#34;Uh oh\u0026#34;) ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://Ginger-Tec.github.io/notes/go/advanced/files/","summary":" Condition if day == \u0026#34;sunday\u0026#34; || day == \u0026#34;saturday\u0026#34; { rest() } else if day == \u0026#34;monday\u0026#34; \u0026amp;\u0026amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(\u0026#34;Uh oh\u0026#34;) ","tags":null,"title":"File Manipulation"},{"categories":null,"contents":" Variable NAME=\u0026#34;John\u0026#34; echo $NAME echo \u0026#34;$NAME\u0026#34; echo \u0026#34;${NAME} Condition if [[ -z \u0026#34;$string\u0026#34; ]]; then echo \u0026#34;String is empty\u0026#34; elif [[ -n \u0026#34;$string\u0026#34; ]]; then echo \u0026#34;String is not empty\u0026#34; fi ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://Ginger-Tec.github.io/notes/bash/basic/","summary":" Variable NAME=\u0026#34;John\u0026#34; echo $NAME echo \u0026#34;$NAME\u0026#34; echo \u0026#34;${NAME} Condition if [[ -z \u0026#34;$string\u0026#34; ]]; then echo \u0026#34;String is empty\u0026#34; elif [[ -n \u0026#34;$string\u0026#34; ]]; then echo \u0026#34;String is not empty\u0026#34; fi ","tags":null,"title":"Bash Variables"},{"categories":["Expert"],"contents":"전문가를 위한 파이썬 프로그래밍 제4판 지은이: 미하우 야보르스키\n10년 이상 다양한 프로그래밍 언어를 이용해 전문적으로 소프트웨어를 작성했다. 주로 웹 애플리케이션을 위한 고성능 분산 백엔드 서비스 코드를 만들었다. 소프트웨어 엔지니어에서 리드 소프트웨어 아키텍트까지 여러 기업에서 다양한 역할을 했다. 과거부터 지금까지 파이썬올 가장 선호한다.\n지은이: 타레크 지아데\n프랑스 부르고뉴에 거주하는 소프트웨어 엔지니어. 일래스틱 Elastic에서 개발자를 위한 도구를 만들고 있다. 이전에는 모질라에서 10여 년간 일했으며, 프랑스 파이썬 사용자 그룹인 AFPy를 설립했다. 다양한 잡지에 파이썬 관련 글을 기고했으며, 프랑스어와 영어로 여러 책을 집필했다. 국내에는 《파이썬 마이크로서비스》(에이콘출판사, 2019), 《파이썬 핵심 개발자들과의 인터뷰》(터닝포인트, 2019)로 소개된 바 있다.\n이 책에 대하여 프로그래밍 교육을 위한 목적으로 처음 만들어져 지금에 이르기까지 파이썬은 ‘가독성과 생산성이높은 다중 패러다임 프로그래밍 언어 제공’이라는 철학에 기반해 진화해왔습니다.\n파이썬은 쉽습니다.\n일반적인 문제 해결에만 초점을 둔다면 몇 시간 안에 그 목적을 충분히 달성할 수 있는 프로그램을 작성할 수 있습니다.\n하지만 동시에 파이썬은 어렵습니다.\n워낙 작성하기 쉽기 때문에, 반대로 가독성이 높고 재사용할 수 있으며 쉽게 유지보수할 수 있는 파이썬 코드를 작성하기는 쉽지 않습니다.\n이 책은 파이썬에 입문하고자 하는 분들을 위한 책은 아닙니다.\n일반적인 문제 해결을 넘어 파이썬이 추구하는 철학의 본질을 이해하고, 그 철학에 기반한 ‘파이써닉'한 프로그램을 작성하고자 하는 분들을 위한 책입니다.\n파이썬의 본질,\n파이썬과 다른 프로그래밍 언어의 차이점, 파이썬올 이용한 디자인 패턴 구현,\n파이썬을 이용한 동시성 구현,\n메타프로그래밍,\n다른 프로그래밍 언어 코드와의 통합,\n애플리케이션 관측성 등 이제까지 봤던 파이썬 서적에서는 볼 수 없었던 내용을 다루고 있습니다.\n파이썬을 보다 파이썬답게 사용하고자 하는 분들에게 훌륭한 인사이트를 전해드릴 수 있을 것입니다.\n이 책은 세 부분으로 나뉩니다.\n도구에 관해 알기: 1~4장에서는 파이썬 프로그래머들이 이용하는 도구의 기본적인 요소들에 초점을 맞춥니다.\n생산성 도구 현대적인 환경, 최신 파이썬 릴리스에서 도입된 새로운 구문 요소들을 살펴봅니다. 다른 프로그래밍 언어에 경험이 있는 프로그래머들과 보다 파이썬 고급 기능에 관해 좀 더 학습하기 원하는 프로그래머들의 안전한 착륙을 돕습니다.\n파이썬을 이용한 애플리케이션 구축: 5~9장에서는 디자인 패턴, 프로그래밍 패러다임, 메타프로그래밍 기법에 관해 살펴봅니다.\n규모는 작지만 유용한 프로그램을 만들어보고, 애플리케이션 아키텍처를 깊이 살펴보게 됩니다.\n또한 파이썬 이외의 프로그래밍 언어로 작성된 코드를 파이썬에 통합 하는 방법을 배우게 됩니다.\n파이썬 애플리케이션 유지보수: 10~13장에서는 애플리케이션이 ‘출시'된 후 일반적으로 발생하는 모든 사항에 관해 살펴봅니다.\n애플리케이션을 쉽게 유지보수하는 데 도움이 되는 도구와 기법들을 살펴봅니다.\n그리고 패키징, 배포, 모니터링, 성능 최적화와 관련된 일반적인 문제들에 대한 접근 방법들도 살펴봅니다.\n1. 파이썬의 현재 1장에서는 파이썬 언어와 파이썬 커뮤니티의 현재 상태에 관해 살펴본다. 파이썬의 지속적인 변경과그 이유에 관해 알아본다. 오래된 파이썬 코드를 다루기 위해 해야 할 것들, 그리고 파이썬 커뮤니티에서 현재 일어나고 있는 일들을 따라잡기 위해 해야 할 일들은 무엇인지 알아본다. 파이썬의 현재와 진행 상황 파이썬 2의 현재와 미래 최신 정보의 확인과 습득 요약 2. 모던 파이썬 개발 환경 2장에서는 파이썬 프로그래머들을 위한 반복적이고도 지속적인 환경을 만들기 위한 현대적인 방법들을 설명한다. 애플리케이션 레벨 및 시스템 레벨 격리의 차이점에 관해 설명한다. 환경 격리를 지원하는 잘 알려진 두 가지 방법인 가상 환경 및 도커 컨테이너와 함께, 다른 대안에 관해서도 살펴본다. 2장 후반부에서는 개발 과정에서 활용할 수 있는 일반적인 생산성 도구에 관해서도 살펴본다. 기술적 요구 사항 파이썬 패키징 생태계 런타임 환경 격리 애플리케이션 레벨 환경 격리 시스템 레벨 환경 격리 유명한 생산성 도구들 요약 3. 파이썬의 새로운 기능 3장에서는 최근 파이썬 릴리스에 포함된 점들을 살펴본다. 최근 파이썬 릴리스들에 반영된 파이썬 구문의 가장 중요한 변경점을 살펴본다. 그리고 다음 메이저 파이썬 릴리스 3.10(집필 시점 기준)에 예 정된 홍미로운 변화에 관해 살펴본다. 기술 요구 사항 최근의 언어 추가 사항 그다지 새롭지는 않지만 여전히 멋진 요소들 미래에 관한 예상 요약 4. 파이썬과 다른 언어와의 비교 4장에서는 파이썬과 다른 언어들을 비교한다. 프로그래밍 이디엄programm ing idiom이 무엇인지, 이들 이 코드에서 어떻게 인식되는지 알아본다. 파이썬의 객체 지향 프로그래밍 모델의 핵심 요소에 관해살펴보고, 그 모델이 다른 유명한 객체 지향 프로그래밍들과 어떻게 다른지 알아본다. 이와 함께 디 스크립터, 데커레이터, 데어터 클래스 같은 유명한 프로그래밍 언어 피처에 관해서도 살펴본다. 다른 언어를 사용해본 프로그래머들은 이 장의 내용을 통해 파이썬 생태계에 안전하게 정착할 수 있을 것 이다. 기술적 요구 사항 클래스 모델과 객체 지향 프로그래밍 동적 다형성 데이터 클래스 함수형 프로그래밍 5. 인터페이스, 패턴, 모듈성 5장에서는 재사용할 수 있는 다양한 디자인 패턴을 구현하는 데 쓰이는 파이썬의 요소에 관해 논의 한다. 클래스 인터페이스, 그리고 파이썬을 이용해 이들을 구현하는 방법에 관해 살펴본다. 또한 통제의 전환 nversion of control 과 디펜던시 주입dependency injection에 관해 살펴본다. 이 두 가지는 매우 유용하지만, 꼭 널리 알려진 프로그래밍 기법은 아니다. 기술적 요구 사항 인터페이스 제어 반전과 디펜던시 주입 요약 6. 동시성 6장에서는 다양한 접근 방식과 라이브러리를 이용해 파이썬에서 동시성concurrency올 구현하는 방법 올 설명한다. 파이썬은 멀티스레딩, 멀티프로세싱, 비동기 프로그래밍의 세 가지 동시성 모델을 지원 한다. 이 모델들의 핵심적인 차이점과 이들을 효과적으로 이용하는 방법을 살펴본다. 기술적 요구 사항 동시성이란 무엇인가? 멀티스레딩 멀티프로세싱 비동기 프로그래밍 요약 7. 이벤트 주도 프로그래밍 7장에서는 이벤트 주도 프로그래밍과 이것이 비동기 프로그래밍 및 다른 동시성 모델과 어떻게 관련 되어 있는지 살펴본다. 여러 유용한 라이브러리들과 함께 이벤트 주도 프로그래밍에 대한 다양한 접 근방식들을확인한다. 기술적 요구 사항 이벤트 주도 프로그래밍이란 무엇인가? 이벤트 주도 프로그래밍의 다양한 스타일 이벤트 주도 아키텍쳐 요약 8. 메타프로그래밍 요소들 8장에서는 파이썬에서 이용할 수 있는 메타프로그래밍에 관한 일반적인 접근 방식에 관해 살펴본다. 이 장에서는 데커레이터, 메타클래스, 코드 생성 패턴과 같은 일반적인 메타프로그래밍 기법들에 관해학습한다. 기술적 요구 사항 메타프로그래밍이란 무엇인가? 데커레이터를 이용해 함수의 행동을 사용 전 수정하기 클래스 인스턴스 생성 프로세스 가로채기 메타클래스 코드 생성 요약 9. 파이썬에 C와 C++ 연결하기 9장에서는 다른 프로그래밍 언어로 작성된 코드를 파이썬 애플리케이션에 통합하는 방법을 살펴본다. C 확장 기능을 언제 사용하는 것이 효과적인지, 또 이들을 어떻게 생성하는지 살펴본다. 기술적 요구 사항 파이썬 확장 기능의 핵심인 C/C++ 파이썬 C 확장 기능 컴파일 및 로딩 확장 기능 이용의 필요성 확장 기능 작성 확장 기능 사용의 단점 확장 기능 없이 다이내믹 라이브러리와 인터페이싱하기 요약 10. 테스팅과 품질 자동화 10장에서는 자동화된 테스팅과 품질 프로세스에 관해 살펴본다. 이 장에서는 널리 알려진 테스팅 프레임워크인 pytest를 포함한 여러 유용한 테스팅 기법에 관해 살펴본다. 완전히 자동화된 방식으로 코드 품질 지표를 측정하고 코드 스타일을 개선할 수 있는 도구들에 관해 살펴본다. 기술적 요구 사항 테스트 주도 개발 원칙 pytest를 이용해 테스트 작성하기 품질 자동화 돌연변이 테스팅 유용한 테스팅 유틸리티 요약 11. 파이썬 코드 패키징과 배포 11장에서는 파이썬 패키징 기술의 현재 상태와 파이썬 패키지 인덱스Python Package Index, PyPI에서 오픈소스 코드로 배포할 수 있는 패키지를 생성하는 베스트 프랙티스에 관해 살펴본다. 웹 개발용 애플리케이션 패키징과 데스크톱 애플리케이션용 스탠드얼론 파이썬 실행 파일을 생성하는 방법에 관해살펴본다. 기술적 요구 사항 라이브러리 패키징 및 배포 웹용 애플리케이션 및 서비스 패키징 스탠드얼론 실행 파일 생성 요약 12. 애플리케이션 동작과 성능 관측 12장에서는 애플리케이션 관측성application observability에 관해 살펴본다. 파이썬 로깅 시스템, 애플 리케이션 지표를 모니터링하고 분산 트랜잭션 트레이싱을 수행하는 방법에 관해 살펴본다. 이와 함께 간단한 관측성 프랙티스를 대규모의 분산 시스템으로 확장하는 방법을 배운다. 기술적 요구 사항 에러와 로그 캡쳐 코드와 커스텀 지표 조사 분산 애플리케이션 트레이싱 요약 13. 코드 최적화 13장에서는 모든 개발자가 알아야 할 최적화의 기본 규칙들을 살펴본다. 애플리케이션 성능 병목을 식별하는 방법과 일반적인 프로파일링 도구의 사용 방법에 관해 살펴본다. 병목을 식별한 뒤 여러 상 황에서 쉽게 적용할 수 있는 널리 이용되는 최적화 기법 및 전략에 관해 살펴본다. 기술적 요구 사항 나쁜 성능을 발생시키는 일반적인 요소들 코드 프로파일링 적절한 데이터 구조를 선택하여 복잡도 줄이기 아키텍처 트레이드오프 활용하기 요약 출처 - 미하우, 타레크 『전문가를 위한 파이썬 프로그래밍 제4판』, 김모세 옮김, Jpub(2022), p4-p24.\n본 콘텐츠는 출처에 표기된 도서의 일부분을 요약한 내용입니다. 상세한 내용은 도서를 확인하는 것이 좋습니다.\n","date":"December 26, 2022","hero":"/posts/expert-python/00-contents-introduction/images/expert.png","permalink":"https://Ginger-Tec.github.io/posts/expert-python/00-contents-introduction/","summary":"전문가를 위한 파이썬 프로그래밍 제4판 지은이: 미하우 야보르스키\n10년 이상 다양한 프로그래밍 언어를 이용해 전문적으로 소프트웨어를 작성했다. 주로 웹 애플리케이션을 위한 고성능 분산 백엔드 서비스 코드를 만들었다. 소프트웨어 엔지니어에서 리드 소프트웨어 아키텍트까지 여러 기업에서 다양한 역할을 했다. 과거부터 지금까지 파이썬올 가장 선호한다.\n지은이: 타레크 지아데\n프랑스 부르고뉴에 거주하는 소프트웨어 엔지니어. 일래스틱 Elastic에서 개발자를 위한 도구를 만들고 있다. 이전에는 모질라에서 10여 년간 일했으며, 프랑스 파이썬 사용자 그룹인 AFPy를 설립했다. 다양한 잡지에 파이썬 관련 글을 기고했으며, 프랑스어와 영어로 여러 책을 집필했다.","tags":["파이썬","책 소개"],"title":"목차 소개"},{"categories":["Expert"],"contents":"아주 오랫동안 파이썬의 가장 중요한 특성은 상호운영성(interoperability) 입니다.\n그러나 이제는 많은 모던 프로그래밍 언어도 유사한 상호운영성을 제공하기에 큰 장점은 아니게 되었습니다.\n오늘날 프로그래머들에게 더욱 중요한 것은 바로 생산성(productivity) 입니다.\n파이썬의 생산성을 높여주는 큰 축의 하나는 공식 파이썬 패키지 인덱스(Official Python Package Index, OPPI)입니다.\nOPPI는 거대한 소프트웨어 라이브러리 및 프레임워크의 보고이며, 명확하면서도 간결한 문법으로 사용할 수 있기에 소프트웨어 작성과 유지보수에 드는 시간과 노력을 현저히 줄여줍니다.\n바로 이 점이 프로그래밍 생산성 영역에서 파이썬의 가치를 더욱 높여줍니다.\n이번 장에서는 파이썬의 현재 상태, 파이썬 생태계와 커뮤니티에서 일어나는 새로운 변화들에 관한 정보를 수집하는 방법에 관해 설명합니다.\n이번 장에서 다루는 주제\n파이썬의 현재와 진행 상황 파이썬 2의 현재와 미래 최신 정보 확인과 습득 1.1 파이썬의 현재와 진행 상황 파이썬의 역사는 생각보다 짧지 않습니다.\n1980년 후반부터 개발 1994년 공식 1.0버전 출시 2000년 10월 16일: 공식 파이썬 2.0 릴리스 2008년 12월 3일: 공식 파이썬 3.0 릴리스 2011년 11월 9일: 파이썬 2.8 출시 미정 발표 2020년 1월 1일: 파이썬 2 개발 및 지원 종료 파이썬 3은 긴 역사에 비해 도입 속도가 그만큼 빠르지 않았기 때문에 파이썬 2는 당초 계획보다 5년이나 지연된 시점에 그 개발과 지원이 종료되었습니다.\n대부분 하위 호환성이 맞지 않는게 문제였습니다.\n다행히 파이썬 2는 역사의 뒤안길로 사라지게 되었고, 기업들은 전략적으로 파이썬 3으로 전환하게 되었습니다.\n1.2 파이썬 2의 현재와 미래 현 시점에서 파이썬 2는 공식적으로 많은 언어 개발자의 지원을 받지 못합니다.\n또한 보안 패치가 되지 않고 있어 안전하지 않은 것으로 간주해야 합니다.\n파이썬 2 코드는 활발하게 개발이 진행되는 소프트웨어의 핵심 컴포넌트로서는 사용되지 않겠지만 오랫동안 추가적으로 개발되지 않은 유틸리티 스크립트, 내부 도구 또는 내부 서비스에서는 여전히 많이 찾아 볼 수 있습니다.\n아직 파이썬2를 사용하는 곳이 있으나, 이제는 파이썬3로 마이그레이션 하는게 좋습니다.\n마이그레이션을 하기 위해서 많은 비용이 필요하기에 다음과 같은 전략을 세워 다른 사람들을 설득해볼 수 있습니다.\n전환 대상과 그 이유를 인식하라. 방해가 되는 대상을 식별하라. 이해관계자들을 설득하라. 이해관계자들의 승인을 얻는 과정이 가장 어렵습니다.\n따라서 문제를 제기하기 전에 철저히 준비해야 합니다.\n공수를 산정할 수 있고, 해당 공수가 필요한 이유를 만들어낼 수 있습니다.\n전환을 해야하는 일반적인 긍정적 이유로는 다음을 들 수 있습니다.\n신규 또는 업데이트된 라이브러리 활용 가능 소유 비용 감소 보다 단순해지는 유지보수와 운영 보다 쉬운 신규 채용 인원 교육 부정적 이유\n큰 보안 이슈 높은 보안 관련 비용 신규 채용 시 어려움. 1.3 최신 정보의 확인과 습득 기술은 끊임없이 진화합니다.\n새로운 언어 또는 언어의 피처들은 유명한 라이브러리나 프레임워크 개발을 이끌게 됩니다.\n이는 차례로 새로운 프로그래밍 패러다임과 새로운 디자인 패턴으로 이어집니다.\n한 언어 생태계에서 이러한 패턴이나 패러다임이 성공을 거두면, 프로그래머들은 이를 다른 언어에도 도입하고자 합니다.\n이렇게 언어에서 언어로 새로운 아이디어가 전파되고 있습니다.\n파이썬 3.9(2020년 10월 5일 릴리스)부터 새로운 메이저 릴리스를 연 단위로 하게 된다.\n이런 릴리스는 파이썬 커뮤니티에 혁신을 위한 끊임없는 연료를 공급받는 것과 같습니다.\n이를 따라잡기 위해서는 어렵지만 파이썬을 업으로 삼은 이들에게 이런 최신 정보를 습득하는 것은 대단히 중요합니다.\n다음 절에서는 파이썬을 둘러싸고 벌어지는 일들에 관한 정보를 얻는 방법들을 소개합니다.\n1.3.1 PEP 문서 파이썬 커뮤니티는 변경점을 알리는 방법을 제공합니다.\n파이썬 언어의 추상적인 아이디어들은 대부분 특별한 메일링 리스트(python-ideas@python.org)를 통해 진행되지만, 실제 변경 내용은 파이썬 개선 제안Python Enhancement Proposal, PEP 문서에 모두 기록됩니다.\nPEP는 파이썬에 이루어지는 변경에 대한 제안을 세부적으로 기술하는 정형화된 문서입니다.\nPEP 문서의 목적, 형태 및 문서 작성 워크플로는 PEP 1 문서로 모두 표준화되어 있습니다.\nPEP 문서는 파이썬에서 매우 중요하며 주제에 따라 다양한 목적을 지원합니다.\n정보 제공: 코어 파이썬 개발자들에게 필요한 정보를 요약하고 파이썬 릴리스 일정을 알려줍니다. 표준화: 모드 스타일, 문서, 기타 가이드라인을 제공합니다. 설계: 제안된 피처를 기술해둡니다. 제안된 모든 PEP 문서는 PEP 0 문서에서 확인할 수 있습니다.(PEP 0 문서는 지속적으로 업데이트된다).\n파이썬의 변경에 관련된 모든 논의를 확인할 수 있을 만큼의 충분한 시간이 없는 사람들에게, 파이썬의 행보에 관한 정보를 얻을 수 있는 훌륭한 보고다.\nPEP 0에서는 승인된 아이디어, 구현된 아이디어는 물론 논의 중인 아이디어들까지 확인할수 있습니다.\n최신 정보 와 관련해 가장 중요한 PEP 인덱스 섹션은 열린open 상태의 PEP일 것이다.\n열린 상태의 PEP는 현재 논의 중인 아이디어들을 설명합니다.\n아직 논의가 진행 중인 흥미로운 PEP들에는 다음과 같은것들이 있습니다.\nPEP 603: collection에 frozenmap 타입 추가 PEP 634: 구조적 패턴 매칭: 명세 PEP 638: 구문적 매크로 PEP 640: 사용되지 않는 변수 구문 1.3.2 활성화된 커뮤니티 파이썬 소프트웨어 파운데이션 Python Software Foundation, PSF은 파이썬을 지탱하는 비영리 조직이다.\nMailman 2(https://mail.python.org/mailman/listinfo): 오래되고 규모가 작은 아카이브다.\nMailman 3(https://mail.python.org/): 상대적으로 덜 오래된 아카이브다. python . org 메일링 리스 트의 현 시점에서의 메인 아카이브로 보다 많은 활성화된 메일링 리스트가 존재한다.\npython-ideas@python.org: 파이썬 메일링 리스트를 이야기할 때 빠지지 않는 메일링 리스트다. 파이썬과 관련된 다양한 아이디어들에 관한 논의의 장이다.\npython-dev@python.org: 코어 파이썬 개발(주로 CPython 인터프리터)을 목적으로 하는 특별한 메일링 리스트다. 또한 PEP를 다른 채널을 통해 공식적으로 발표하기 전, 새로운 PEP 초안을 논의하는 곳이다.\npython-announce-list@python.org: 다양한 공지 사항을 안내하는 메일링 리스트다. 각종 콘퍼런스나 미트업, 패키지나 프레임워크 또는 새로운 PEP의 릴리스 소식 을 알 수 있다.\n전통적인 메일링 리스트 외에 디스코스 Discourse 플랫폼을 통한 공식 인터넷 포럼도 제공한다(https:// discuss.python.org/).\n공식 메시지 보드와 메일링 리스트 외에도 잘 알려진 플랫폼들에도 몇몇 공개 파이썬 커뮤니티가 있습니다. 잘 알려진 것들은 다음과 같다.\nPySlackers Slack workspace(pyslackers.com): 파이썬 추종자들이 모인 거대 커뮤니티다. 슬랙Slack 메시징 플랫폼을 통해 제공되며 파이썬과 관련된 것이라면 무엇이든 논의합니다.\nPython Discord server(pythondiscord.com): 또 다른 공개 파이썬 커뮤니티다. 디스코드 Discord 를 이용한다.\n/r/python subreddit(www.reddit.com/r/Python/): 레딧Reddit 플랫폼의 파이썬 전용 하위 레딧이다.\n1.3.3 기타 자료들 모든 새로운 PEP를 읽고, 메일링 리스트를 구독하고, 커뮤니티에 합류하는 것은 순간순간 일어나는 일들을 알아채기 위한 최고의 방법입니다.\n그러나 이 모든 것을 지속적으로 하기에는 너무 많은 시간과 노력이 소요됩니다.\n온라인의 정보를 직접 필터링하는 대신 불로그, 뉴스레터, 소위 ‘어섬 리스트awesome list 라 불리는 업선된 자료들을 활용하는 것도 좋습니다.\n최신 정보를 원한다면 뉴스레터가 특히 뛰어나다. 구독하면 좋을 만한 홍미로운 뉴스레터 몇 가지를 소개합니다.\n주간 파이썬Python Weekly(http://www.pythonweekly.com/): 유명한 주간 뉴스레터로, 수십 가지의 새롭고 흥미로운 파이썬 패키지와 정보들을 제공한다.\n주간 파이코더PyCoder\u0026rsquo;s Weekly(https://pycoders.com): 또 다른 유명한 주간 뉴스레터로, 새로운 패키지와 흥미로운 아티클을 제공한다.\n정보를 얻는 완전히 새로운 방법은 어섬 리스트를 활용하는 것이다. 어섬 리스트는 업선된 특정한 주 제에 관한 가치 있고 주요한 자료들의 링크 리스트를 제공하며 주로 깃Git 저장소에서 관리된다. 이 리스트들은 매우 방대하며 여러 하위 분류로 나뉘어 있다.\nawesome-python(https://github.com/vinta/awesome-python): 흥미로운 프로젝트들(대부분 깃허브에서 호스팅됨)과 표준 라이브러리 모듈에 관한 참조 정보를 제공하며, 약 80개의 하위 주제로 구 분된다. 하위 주제는 캐싱, 인증, 디버깅 같은 기본 프로그래밍 개념부터 파이썬이 자주 이용되는웹 개발, 데이터 사이언스, 로보틱스, 침투 테스팅penetration testing 등 전 엔지니어링 영역으로 다 양하게 구분된다. 프로젝트는 물론 뉴스레터, 팟캐스트, 서적 및 튜토리얼까지 풍성한 링크를 제공한다.\npycrumbs(https://github.com/kirang89/pycrumbs): 흥미롭고 가치 있는 아티클을 중점적으로 제공한다. 아티클들은 100여 개의 카데고리로 나뉘며 파이썬 피처, 일반 프로그래밍 데크닉, 자기 계발주제등과관련이 있다.\npythonidae(https://github.com/svaksha/pythonidae): 수학, 생물학, 화학, 웹 개발, 물리학, 이미지처리와 같이 파이썬을 빈번하게 이용하는 과학 및 기술 영역 정보들을 중점적으로 제공한다. 트리 형태의 구조로 구성되어 있다. 메인 페이지는 20여 개의 주요 카테고리 페이지로 구성된다. 이 카테고리들은 보다 작은 하위 카테고리를 포함하며, 각 하위 카테고리에서는 유용한 라이브러리나 리소스의 목록을 제공한다.\n1.4 요약 이번 장에서는 파이썬의 현재 상태와 파이썬의 역사를 통해 나타난 변화 과정에 관해 살펴봤고, 파이썬이 변화한 이유와 그 변화를 따라가는 것이 왜 중요한지 설명했습니다.\n30여 년이라는 파이썬의 역사, 그리고 커지고 있는 파이썬 커뮤니티로 인해 파이썬 생태계에서 일어나는 변화를 실시간으로 따라잡기는 여의치 않습니다. (따라서 필요로 하는 수준에 맞는 커뮤니티를 선택하여 정보를 습득하는 것이 중요합니다)\n언어의 변화와 함께 개발 도구들도 함께 달라지며 소프트웨어 개발 프로세스는 보다 쉽게 개선되고 있습니다.\n계속해서 다음 장에서는 이러한 변화와 함께 현대적인 개발 환경들에 관해 살펴볼 것 이고,\n반복적이고 지속적인 개발 환경을 구성함으로써 생산성과 개발 편의성 모두를 높이는 방법을 알아보게 됩니다.\n또한 파이썬 커뮤니티에서 제공하는 다양한 생산성 도구도 살펴볼 예정입니다.\n출처 - 미하우, 타레크 『전문가를 위한 파이썬 프로그래밍 제4판』, 김모세 옮김, Jpub(2022), p25-p36.\n본 콘텐츠는 출처에 표기된 도서에 일부분을 요약한 내용입니다. 상세한 내용은 도서를 확인하는 것이 좋습니다.\n","date":"December 26, 2022","hero":"/posts/expert-python/01-present-of-python/images/present.png","permalink":"https://Ginger-Tec.github.io/posts/expert-python/01-present-of-python/","summary":"아주 오랫동안 파이썬의 가장 중요한 특성은 상호운영성(interoperability) 입니다.\n그러나 이제는 많은 모던 프로그래밍 언어도 유사한 상호운영성을 제공하기에 큰 장점은 아니게 되었습니다.\n오늘날 프로그래머들에게 더욱 중요한 것은 바로 생산성(productivity) 입니다.\n파이썬의 생산성을 높여주는 큰 축의 하나는 공식 파이썬 패키지 인덱스(Official Python Package Index, OPPI)입니다.\nOPPI는 거대한 소프트웨어 라이브러리 및 프레임워크의 보고이며, 명확하면서도 간결한 문법으로 사용할 수 있기에 소프트웨어 작성과 유지보수에 드는 시간과 노력을 현저히 줄여줍니다.\n바로 이 점이 프로그래밍 생산성 영역에서 파이썬의 가치를 더욱 높여줍니다.","tags":["파이썬의 현재","파이썬의 미래","파이썬 최신 정보"],"title":"파이썬의 현재"},{"categories":["Basic"],"contents":"Greeting! This is an introduction post. This post tests the followings:\nHero image is in the same directory as the post. This post should be at top of the sidebar. Post author should be the same as specified in author.yaml file. ","date":"June 8, 2020","hero":"/posts/introduction/hero.svg","permalink":"https://Ginger-Tec.github.io/posts/introduction/","summary":"Greeting! This is an introduction post. This post tests the followings:\nHero image is in the same directory as the post. This post should be at top of the sidebar. Post author should be the same as specified in author.yaml file. ","tags":["Basic","Multi-lingual"],"title":"Introduction"},{"categories":null,"contents":"This is a sample post intended to test the followings:\nA different post author. Table of contents. Markdown content rendering. Math rendering. Emoji rendering. Markdown Syntax Rendering Headings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Inline Markdown In Table italics bold strikethrough code Code Blocks Code block with backticks html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nMath Rendering Block math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\nEmoji Rendering 🙈 🙈 🙉 🙉 🙊 🙊\nThe above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"June 8, 2020","hero":"/posts/markdown-sample/hero.svg","permalink":"https://Ginger-Tec.github.io/posts/markdown-sample/","summary":"This is a sample post intended to test the followings:\nA different post author. Table of contents. Markdown content rendering. Math rendering. Emoji rendering. Markdown Syntax Rendering Headings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur?","tags":null,"title":"Markdown Samples"},{"categories":["Basic"],"contents":"This sample post tests the followings:\nCategory, sub-category nesting in the sidebar. Hero image and other images are in images folder inside this post directory. Different media rendering like image, tweet, YouTube video, Vimeo video etc. Image Sample Tweet Sample Owl bet you\u0026#39;ll lose this staring contest 🦉 pic.twitter.com/eJh4f2zncC\n\u0026mdash; San Diego Zoo Wildlife Alliance (@sandiegozoo) October 26, 2021 YouTube Video Sample Vimeo Video Sample ","date":"June 8, 2020","hero":"/posts/category/sub-category/rich-content/images/forest.jpg","permalink":"https://Ginger-Tec.github.io/posts/category/sub-category/rich-content/","summary":"This sample post tests the followings:\nCategory, sub-category nesting in the sidebar. Hero image and other images are in images folder inside this post directory. Different media rendering like image, tweet, YouTube video, Vimeo video etc. Image Sample Tweet Sample Owl bet you\u0026#39;ll lose this staring contest 🦉 pic.twitter.com/eJh4f2zncC\n\u0026mdash; San Diego Zoo Wildlife Alliance (@sandiegozoo) October 26, 2021 YouTube Video Sample Vimeo Video Sample ","tags":["Markdown","Content Organization","Multi-lingual"],"title":"Rich Content"},{"categories":null,"contents":"This is a sample post intended to test the followings:\nDefault hero image. Different shortcodes. Alert The following alerts are available in this theme.\nThis is sample alert with type=\u0026quot;success\u0026quot;. This is sample alert with type=\u0026quot;danger\u0026quot;. This is sample alert with type=\u0026quot;warning\u0026quot;. This is sample alert with type=\u0026quot;info\u0026quot;. This is sample alert with type=\u0026quot;dark\u0026quot;. This is sample alert with type=\u0026quot;primary\u0026quot;. This is sample alert with type=\u0026quot;secondary\u0026quot;. Image A sample image without any attribute. A sample image with height and width attributes. A center aligned image with height and width attributes. A image with float attribute. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras egestas lectus sed leo ultricies ultricies. Praesent tellus risus, eleifend vel efficitur ac, venenatis sit amet sem. Ut ut egestas erat. Fusce ut leo turpis. Morbi consectetur sed lacus vitae vehicula. Cras gravida turpis id eleifend volutpat. Suspendisse nec ipsum eu erat finibus dictum. Morbi volutpat nulla purus, vel maximus ex molestie id. Nullam posuere est urna, at fringilla eros venenatis quis.\nFusce vulputate dolor augue, ut porta sapien fringilla nec. Vivamus commodo erat felis, a sodales lectus finibus nec. In a pulvinar orci. Maecenas suscipit eget lorem non pretium. Nulla aliquam a augue nec blandit. Curabitur ac urna iaculis, ornare ligula nec, placerat nulla. Maecenas aliquam nisi vitae tempus vulputate.\nSplit This theme support splitting the page into as many columns as you wish.\nTwo column split Left Column Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras egestas lectus sed leo ultricies ultricies. Right Column Fusce ut leo turpis. Morbi consectetur sed lacus vitae vehicula. Cras gravida turpis id eleifend volutpat. Three column split Left Column Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras egestas lectus sed leo ultricies ultricies. Middle Column Aenean dignissim dictum ex. Donec a nunc vel nibh placerat interdum. Right Column Fusce ut leo turpis. Morbi consectetur sed lacus vitae vehicula. Cras gravida turpis id eleifend volutpat. Vertical Space Give vertical space between two lines.\nThis is line one. This is line two. It should have 4rem vertical space with previous line.\nVideo Video by Rahul Sharma from Pexels.\nMermaid Here, are few example of mermaid shortcode.\nGraph:\ngraph LR; A[Hard edge] --\u003e|Link text| B(Round edge) B --\u003e C{Decision} C --\u003e|One| D[Result one] C --\u003e|Two| E[Result two] Sequence Diagram:\nsequenceDiagram participant Alice participant Bob Alice-\u003e\u003eJohn: Hello John, how are you? loop Healthcheck John-\u003e\u003eJohn: Fight against hypochondria end Note right of John: Rational thoughts prevail! John--\u003e\u003eAlice: Great! John-\u003e\u003eBob: How about you? Bob--\u003e\u003eJohn: Jolly good! Gantt diagram:\ngantt dateFormat YYYY-MM-DD title Adding GANTT diagram to mermaid excludes weekdays 2014-01-10 section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d Class Diagram:\nclassDiagram Class01 \u003c|-- AveryLongClass : Cool Class03 *-- Class04 Class05 o-- Class06 Class07 .. Class08 Class09 --\u003e C2 : Where am i? Class09 --* C3 Class09 --|\u003e Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla Class08 \u003c--\u003e C2: Cool label Git Graph:\ngitGraph: options { \"nodeSpacing\": 150, \"nodeRadius\": 10 } end commit branch newbranch checkout newbranch commit commit checkout master commit commit merge newbranch ER Diagram:\nerDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses Gist ","date":"June 8, 2020","hero":"/posts/shortcodes/boat.jpg","permalink":"https://Ginger-Tec.github.io/posts/shortcodes/","summary":"This is a sample post intended to test the followings:\nDefault hero image. Different shortcodes. Alert The following alerts are available in this theme.\nThis is sample alert with type=\u0026quot;success\u0026quot;. This is sample alert with type=\u0026quot;danger\u0026quot;. This is sample alert with type=\u0026quot;warning\u0026quot;. This is sample alert with type=\u0026quot;info\u0026quot;. This is sample alert with type=\u0026quot;dark\u0026quot;. This is sample alert with type=\u0026quot;primary\u0026quot;. This is sample alert with type=\u0026quot;secondary\u0026quot;. Image A sample image without any attribute.","tags":null,"title":"Shortcodes Samples"}]
[{"categories":null,"contents":" Hello World A sample go program is show here.\npackage main import \u0026#34;fmt\u0026#34; func main() { message := greetMe(\u0026#34;world\u0026#34;) fmt.Println(message) } func greetMe(name string) string { return \u0026#34;Hello, \u0026#34; + name + \u0026#34;!\u0026#34; } Run the program as below:\n$ go run hello.go Variables Normal Declaration:\nvar msg string msg = \u0026#34;Hello\u0026#34; Shortcut:\nmsg := \u0026#34;Hello\u0026#34; Constants const Phi = 1.618 ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://Ginger-Tec.github.io/notes/go/basic/introduction/","summary":" Hello World A sample go program is show here.\npackage main import \u0026#34;fmt\u0026#34; func main() { message := greetMe(\u0026#34;world\u0026#34;) fmt.Println(message) } func greetMe(name string) string { return \u0026#34;Hello, \u0026#34; + name + \u0026#34;!\u0026#34; } Run the program as below:\n$ go run hello.go Variables Normal Declaration:\nvar msg string msg = \u0026#34;Hello\u0026#34; Shortcut:\nmsg := \u0026#34;Hello\u0026#34; Constants const Phi = 1.618 ","tags":null,"title":"Introduction"},{"categories":null,"contents":" Strings str := \u0026#34;Hello\u0026#34; Multiline string\nstr := `Multiline string` Numbers Typical types\nnum := 3 // int num := 3. // float64 num := 3 + 4i // complex128 num := byte(\u0026#39;a\u0026#39;) // byte (alias for uint8) Other Types\nvar u uint = 7 // uint (unsigned) var p float32 = 22.7 // 32-bit float Arrays // var numbers [5]int numbers := [...]int{0, 0, 0, 0, 0} Pointers func main () { b := *getPointer() fmt.Println(\u0026#34;Value is\u0026#34;, b) func getPointer () (myPointer *int) { a := 234 return \u0026amp;a a := new(int) *a = 234 Pointers point to a memory location of a variable. Go is fully garbage-collected.\nType Conversion i := 2 f := float64(i) u := uint(i) Slice slice := []int{2, 3, 4} slice := []byte(\u0026#34;Hello\u0026#34;) ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://Ginger-Tec.github.io/notes/go/basic/types/","summary":"Strings str := \u0026#34;Hello\u0026#34; Multiline string\nstr := `Multiline string` Numbers Typical types\nnum := 3 // int num := 3. // float64 num := 3 + 4i // complex128 num := byte(\u0026#39;a\u0026#39;) // byte (alias for uint8) Other Types\nvar u uint = 7 // uint (unsigned) var p float32 = 22.7 // 32-bit float Arrays // var numbers [5]int numbers := [...]int{0, 0, 0, 0, 0} Pointers func main () { b := *getPointer() fmt.","tags":null,"title":"Basic Types"},{"categories":null,"contents":" Condition if day == \u0026#34;sunday\u0026#34; || day == \u0026#34;saturday\u0026#34; { rest() } else if day == \u0026#34;monday\u0026#34; \u0026amp;\u0026amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(\u0026#34;Uh oh\u0026#34;) Switch switch day { case \u0026#34;sunday\u0026#34;: // cases don\u0026#39;t \u0026#34;fall through\u0026#34; by default! fallthrough case \u0026#34;saturday\u0026#34;: rest() default: work() } Loop for count := 0; count \u0026lt;= 10; count++ { fmt.Println(\u0026#34;My counter is at\u0026#34;, count) } entry := []string{\u0026#34;Jack\u0026#34;,\u0026#34;John\u0026#34;,\u0026#34;Jones\u0026#34;} for i, val := range entry { fmt.Printf(\u0026#34;At position %d, the character %s is present\\n\u0026#34;, i, val) n := 0 x := 42 for n != x { n := guess() } ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://Ginger-Tec.github.io/notes/go/basic/flow-control/","summary":"Condition if day == \u0026#34;sunday\u0026#34; || day == \u0026#34;saturday\u0026#34; { rest() } else if day == \u0026#34;monday\u0026#34; \u0026amp;\u0026amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(\u0026#34;Uh oh\u0026#34;) Switch switch day { case \u0026#34;sunday\u0026#34;: // cases don\u0026#39;t \u0026#34;fall through\u0026#34; by default! fallthrough case \u0026#34;saturday\u0026#34;: rest() default: work() } Loop for count := 0; count \u0026lt;= 10; count++ { fmt.Println(\u0026#34;My counter is at\u0026#34;, count) } entry := []string{\u0026#34;Jack\u0026#34;,\u0026#34;John\u0026#34;,\u0026#34;Jones\u0026#34;} for i, val := range entry { fmt.","tags":null,"title":"Flow Control"},{"categories":null,"contents":" Condition if day == \u0026#34;sunday\u0026#34; || day == \u0026#34;saturday\u0026#34; { rest() } else if day == \u0026#34;monday\u0026#34; \u0026amp;\u0026amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(\u0026#34;Uh oh\u0026#34;) ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://Ginger-Tec.github.io/notes/go/advanced/files/","summary":" Condition if day == \u0026#34;sunday\u0026#34; || day == \u0026#34;saturday\u0026#34; { rest() } else if day == \u0026#34;monday\u0026#34; \u0026amp;\u0026amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(\u0026#34;Uh oh\u0026#34;) ","tags":null,"title":"File Manipulation"},{"categories":null,"contents":" Variable NAME=\u0026#34;John\u0026#34; echo $NAME echo \u0026#34;$NAME\u0026#34; echo \u0026#34;${NAME} Condition if [[ -z \u0026#34;$string\u0026#34; ]]; then echo \u0026#34;String is empty\u0026#34; elif [[ -n \u0026#34;$string\u0026#34; ]]; then echo \u0026#34;String is not empty\u0026#34; fi ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://Ginger-Tec.github.io/notes/bash/basic/","summary":" Variable NAME=\u0026#34;John\u0026#34; echo $NAME echo \u0026#34;$NAME\u0026#34; echo \u0026#34;${NAME} Condition if [[ -z \u0026#34;$string\u0026#34; ]]; then echo \u0026#34;String is empty\u0026#34; elif [[ -n \u0026#34;$string\u0026#34; ]]; then echo \u0026#34;String is not empty\u0026#34; fi ","tags":null,"title":"Bash Variables"},{"categories":null,"contents":"전문가를 위한 파이썬 프로그래밍 제4판 지은이: 미하우 야보르스키\n10년 이상 다양한 프로그래밍 언어를 이용해 전문적으로 소프트웨어를 작성했다. 주로 웹 애플리케이션을 위한 고성능 분산 백엔드 서비스 코드를 만들었다. 소프트웨어 엔지니어에서 리드 소프트웨어 아키텍트까지 여러 기업에서 다양한 역할을 했다. 과거부터 지금까지 파이썬올 가장 선호한다.\n지은이: 타레크 지아데\n프랑스 부르고뉴에 거주하는 소프트웨어 엔지니어. 일래스틱 Elastic에서 개발자를 위한 도구를 만들고 있다. 이전에는 모질라에서 10여 년간 일했으며, 프랑스 파이썬 사용자 그룹인 AFPy를 설립했다. 다양한 잡지에 파이썬 관련 글을 기고했으며, 프랑스어와 영어로 여러 책을 집필했다. 국내에는 《파이썬 마이크로서비스》(에이콘출판사, 2019), 《파이썬 핵심 개발자들과의 인터뷰》(터닝포인트, 2019)로 소개된 바 있다.\n프로그래밍 교육을 위한 목적으로 처음 만들어져 지금에 이르기까지 파이썬은 ‘가독성과 생산성이높은 다중 패러다임 프로그래밍 언어 제공’이라는 철학에 기반해 진화해왔습니다.\n파이썬은 쉽습니다. 일반적인 문제 해결에만 초점을 둔다면 몇 시간 안에 그 목적을 충분히 달성할 수 있는 프로그램을 작성할 수 있습니다. 하지만 동시에 파이썬은 어렵습니다. 워낙 작성하기 쉽기 때문에, 반대로 가독성이 높고 재사용할 수 있으며 쉽게 유지보수할 수 있는 파이썬 코드를 작성하기는 쉽지 않습니다.\n이 책은 파이썬에 입문하고자 하는 분들을 위한 책은 아닙니다. 일반적인 문제 해결을 넘어 파이썬이 추구하는 철학의 본질을 이해하고, 그 철학에 기반한 ‘파이써닉\u0026rsquo;한 프로그램을 작성하고자 하는 분들을 위한 책입니다. 파이썬의 본질, 파이썬과 다른 프로그래밍 언어의 차이점, 파이썬올 이용한 디자인 패턴 구현, 파이썬을 이용한 동시성 구현, 메타프로그래밍, 다른 프로그래밍 언어 코드와의 통합, 애플리케이션 관측성 등 이제까지 봤던 파이썬 서적에서는 볼 수 없었던 내용을 다루고 있습니다. 파이썬을 보다 파이썬답게 사용하고자 하는 분들에게 훌륭한 인사이트를 전해드릴 수 있을 것입니다.\n전문가를 위한 파이썬 프로그래밍 제4판 지은이: 미하우 야보르스키\n10년 이상 다양한 프로그래밍 언어를 이용해 전문적으로 소프트웨어를 작성했다. 주로 웹 애플리케이션을 위한 고성능 분산 백엔드 서비스 코드를 만들었다. 소프트웨어 엔지니어에서 리드 소프트웨어 아키텍트까지 여러 기업에서 다양한 역할을 했다. 과거부터 지금까지 파이썬올 가장 선호한다.\n지은이: 타레크 지아데\n프랑스 부르고뉴에 거주하는 소프트웨어 엔지니어. 일래스틱 Elastic에서 개발자를 위한 도구를 만들고 있다. 이전에는 모질라에서 10여 년간 일했으며, 프랑스 파이썬 사용자 그룹인 AFPy를 설립했다. 다양한 잡지에 파이썬 관련 글을 기고했으며, 프랑스어와 영어로 여러 책을 집필했다. 국내에는 《파이썬 마이크로서비스》(에이콘출판사, 2019), 《파이썬 핵심 개발자들과의 인터뷰》(터닝포인트, 2019)로 소개된 바 있다.\n프로그래밍 교육을 위한 목적으로 처음 만들어져 지금에 이르기까지 파이썬은 ‘가독성과 생산성이높은 다중 패러다임 프로그래밍 언어 제공’이라는 철학에 기반해 진화해왔습니다.\n파이썬은 쉽습니다. 일반적인 문제 해결에만 초점을 둔다면 몇 시간 안에 그 목적을 충분히 달성할 수 있는 프로그램을 작성할 수 있습니다. 하지만 동시에 파이썬은 어렵습니다. 워낙 작성하기 쉽기 때문에, 반대로 가독성이 높고 재사용할 수 있으며 쉽게 유지보수할 수 있는 파이썬 코드를 작성하기는 쉽지 않습니다.\n이 책은 파이썬에 입문하고자 하는 분들을 위한 책은 아닙니다. 일반적인 문제 해결을 넘어 파이썬이 추구하는 철학의 본질을 이해하고, 그 철학에 기반한 ‘파이써닉\u0026rsquo;한 프로그램을 작성하고자 하는 분들을 위한 책입니다. 파이썬의 본질, 파이썬과 다른 프로그래밍 언어의 차이점, 파이썬올 이용한 디자인 패턴 구현, 파이썬을 이용한 동시성 구현, 메타프로그래밍, 다른 프로그래밍 언어 코드와의 통합, 애플리케이션 관측성 등 이제까지 봤던 파이썬 서적에서는 볼 수 없었던 내용을 다루고 있습니다. 파이썬을 보다 파이썬답게 사용하고자 하는 분들에게 훌륭한 인사이트를 전해드릴 수 있을 것입니다.\n이 책에 대하여 파이썬이 세상을 흔들다!\n1980년대 후반 출시되었던 첫 번째 버전부터 가장 최신의 3.10 버전까지, 파이썬은 ‘가독성과 생산성이 높은 다중 패러다임 프로그래밍 언어 제공’이라는 한결같은 철학에 기반해 진화해왔다.\n처음 사람들은 파이썬을 그저 또 하나의 스크립팅 언어라고 생각했다. 많은 사람이 파이썬으로는 대규모의 복잡한 시스템을 구축하지 못할 것이라고 생각했다. 그러나 수년이 지나며 선구자 같은 몇몇 기업 덕분에 거의 모든 종류의 소프트웨어를 구축하는 데 파이썬올 이용할 수 있음이 분명해졌다.\n파이썬 코드는 작성하기는 쉽다. 하지만 가독성이 높고, 재사용할 수 있으며, 쉽게 유지보수할 수 있는 코드를 만들기는 쉽지 않다. 좋은 소프트웨어 기교와 기법들을 적용해야만 이런 품질을 얻을 수 있다. 그리고 이런 기교와 기법들은 지속적인 학습과 경험을 통해 점진적으로 습득해야 한다.\n이 책에는 두어 시간 만에 구현할 수 있는 아주 작은 셸 시스템 스크립트부터 수십 명의 개발자들이 몇 년에 걸쳐 구현한 대규모 애플리케이션까지, 수년간 파이썬으로 모든 유형의 애플리케이션을 구현한 전문적인 경험에서 나온 산지식이 담겨 있다.\n이 책은 세 부분으로 나뉜다.\n도구에 관해 알기: 1~4장에서는 파이썬 프로그래머들이 이용하는 도구의 기본적인 요소들에 초점을 맞춘다. 생산성 도구 현대적인 환경, 최신 파이썬 릴리스에서 도입된 새로운 구문 요소들을 살펴본다. 다른 프로그래밍 언어에 경험이 있는 프로그래머들과 보다 파이썬 고급 기능에 관해 좀 더 학습하기 원하는 프로그래머들의 안전한 착륙을 돕는다. 파이썬을 이용한 애플리케이션 구축: 5~9장에서는 디자인 패턴, 프로그래밍 패러다임, 메타프로그래밍 기법에 관해 살펴본다. 규모는 작지만 유용한 프로그램을 만들어보고, 애플리케이션 아키텍처를 깊이 살펴볼 것이다. 또한 파이썬 이외의 프로그래밍 언어로 작성된 코드를 파이썬에 통합 하는 방법을 살펴본다. 파이썬 애플리케이션 유지보수: 10~13장에서는 애플리케이션이 ‘출시\u0026rsquo;된 후 일반적으로 발생하는 모든 사항에 관해 살펴본다. 애플리케이션을 쉽게 유지보수하는 데 도움이 되는 도구와 기법들을 살펴본다. 그리고 패키징, 배포, 모니터링, 성능 최적화와 관련된 일반적인 문제들에 대한 접근 방법들도 살펴본다. 1. 파이썬의 현재 1장에서는 파이썬 언어와 파이썬 커뮤니티의 현재 상태에 관해 살펴본다. 파이썬의 지속적인 변경과그 이유에 관해 알아본다. 오래된 파이썬 코드를 다루기 위해 해야 할 것들, 그리고 파이썬 커뮤니티에서 현재 일어나고 있는 일들을 따라잡기 위해 해야 할 일들은 무엇인지 알아본다. 파이썬의 현재와 진행 상황 파이썬 2의 현재와 미래 최신 정보의 확인과 습득 요약 2. 모던 파이썬 개발 환경 2장에서는 파이썬 프로그래머들을 위한 반복적이고도 지속적인 환경을 만들기 위한 현대적인 방법들을 설명한다. 애플리케이션 레벨 및 시스템 레벨 격리의 차이점에 관해 설명한다. 환경 격리를 지원하는 잘 알려진 두 가지 방법인 가상 환경 및 도커 컨테이너와 함께, 다른 대안에 관해서도 살펴본다. 2장 후반부에서는 개발 과정에서 활용할 수 있는 일반적인 생산성 도구에 관해서도 살펴본다. 기술적 요구 사항 파이썬 패키징 생태계 런타임 환경 격리 애플리케이션 레벨 환경 격리 시스템 레벨 환경 격리 유명한 생산성 도구들 요약 3. 파이썬의 새로운 기능 3장에서는 최근 파이썬 릴리스에 포함된 점들을 살펴본다. 최근 파이썬 릴리스들에 반영된 파이썬 구문의 가장 중요한 변경점을 살펴본다. 그리고 다음 메이저 파이썬 릴리스 3.10(집필 시점 기준)에 예 정된 홍미로운 변화에 관해 살펴본다. 기술 요구 사항 최근의 언어 추가 사항 그다지 새롭지는 않지만 여전히 멋진 요소들 미래에 관한 예상 요약 4. 파이썬과 다른 언어와의 비교 4장에서는 파이썬과 다른 언어들을 비교한다. 프로그래밍 이디엄programm ing idiom이 무엇인지, 이들 이 코드에서 어떻게 인식되는지 알아본다. 파이썬의 객체 지향 프로그래밍 모델의 핵심 요소에 관해살펴보고, 그 모델이 다른 유명한 객체 지향 프로그래밍들과 어떻게 다른지 알아본다. 이와 함께 디 스크립터, 데커레이터, 데어터 클래스 같은 유명한 프로그래밍 언어 피처에 관해서도 살펴본다. 다른 언어를 사용해본 프로그래머들은 이 장의 내용을 통해 파이썬 생태계에 안전하게 정착할 수 있을 것 이다. 기술적 요구 사항 클래스 모델과 객체 지향 프로그래밍 동적 다형성 데이터 클래스 함수형 프로그래밍 5. 인터페이스, 패턴, 모듈성 5장에서는 재사용할 수 있는 다양한 디자인 패턴을 구현하는 데 쓰이는 파이썬의 요소에 관해 논의 한다. 클래스 인터페이스, 그리고 파이썬을 이용해 이들을 구현하는 방법에 관해 살펴본다. 또한 통제의 전환 nversion of control 과 디펜던시 주입dependency injection에 관해 살펴본다. 이 두 가지는 매우 유용하지만, 꼭 널리 알려진 프로그래밍 기법은 아니다. 기술적 요구 사항 인터페이스 제어 반전과 디펜던시 주입 요약 6. 동시성 6장에서는 다양한 접근 방식과 라이브러리를 이용해 파이썬에서 동시성concurrency올 구현하는 방법 올 설명한다. 파이썬은 멀티스레딩, 멀티프로세싱, 비동기 프로그래밍의 세 가지 동시성 모델을 지원 한다. 이 모델들의 핵심적인 차이점과 이들을 효과적으로 이용하는 방법을 살펴본다. 기술적 요구 사항 동시성이란 무엇인가? 멀티스레딩 멀티프로세싱 비동기 프로그래밍 요약 7. 이벤트 주도 프로그래밍 7장에서는 이벤트 주도 프로그래밍과 이것이 비동기 프로그래밍 및 다른 동시성 모델과 어떻게 관련 되어 있는지 살펴본다. 여러 유용한 라이브러리들과 함께 이벤트 주도 프로그래밍에 대한 다양한 접 근방식들을확인한다. 기술적 요구 사항 이벤트 주도 프로그래밍이란 무엇인가? 이벤트 주도 프로그래밍의 다양한 스타일 이벤트 주도 아키텍쳐 요약 8. 메타프로그래밍 요소들 8장에서는 파이썬에서 이용할 수 있는 메타프로그래밍에 관한 일반적인 접근 방식에 관해 살펴본다. 이 장에서는 데커레이터, 메타클래스, 코드 생성 패턴과 같은 일반적인 메타프로그래밍 기법들에 관해학습한다. 기술적 요구 사항 메타프로그래밍이란 무엇인가? 데커레이터를 이용해 함수의 행동을 사용 전 수정하기 클래스 인스턴스 생성 프로세스 가로채기 메타클래스 코드 생성 요약 9. 파이썬에 C와 C++ 연결하기 9장에서는 다른 프로그래밍 언어로 작성된 코드를 파이썬 애플리케이션에 통합하는 방법을 살펴본다. C 확장 기능을 언제 사용하는 것이 효과적인지, 또 이들을 어떻게 생성하는지 살펴본다. 기술적 요구 사항 파이썬 확장 기능의 핵심인 C/C++ 파이썬 C 확장 기능 컴파일 및 로딩 확장 기능 이용의 필요성 확장 기능 작성 확장 기능 사용의 단점 확장 기능 없이 다이내믹 라이브러리와 인터페이싱하기 요약 10. 테스팅과 품질 자동화 10장에서는 자동화된 테스팅과 품질 프로세스에 관해 살펴본다. 이 장에서는 널리 알려진 테스팅 프레임워크인 pytest를 포함한 여러 유용한 테스팅 기법에 관해 살펴본다. 완전히 자동화된 방식으로 코드 품질 지표를 측정하고 코드 스타일을 개선할 수 있는 도구들에 관해 살펴본다. 기술적 요구 사항 테스트 주도 개발 원칙 pytest를 이용해 테스트 작성하기 품질 자동화 돌연변이 테스팅 유용한 테스팅 유틸리티 요약 11. 파이썬 코드 패키징과 배포 11장에서는 파이썬 패키징 기술의 현재 상태와 파이썬 패키지 인덱스Python Package Index, PyPI에서 오픈소스 코드로 배포할 수 있는 패키지를 생성하는 베스트 프랙티스에 관해 살펴본다. 웹 개발용 애플리케이션 패키징과 데스크톱 애플리케이션용 스탠드얼론 파이썬 실행 파일을 생성하는 방법에 관해살펴본다. 기술적 요구 사항 라이브러리 패키징 및 배포 웹용 애플리케이션 및 서비스 패키징 스탠드얼론 실행 파일 생성 요약 12. 애플리케이션 동작과 성능 관측 12장에서는 애플리케이션 관측성application observability에 관해 살펴본다. 파이썬 로깅 시스템, 애플 리케이션 지표를 모니터링하고 분산 트랜잭션 트레이싱을 수행하는 방법에 관해 살펴본다. 이와 함께 간단한 관측성 프랙티스를 대규모의 분산 시스템으로 확장하는 방법을 배운다. 기술적 요구 사항 에러와 로그 캡쳐 코드와 커스텀 지표 조사 분산 애플리케이션 트레이싱 요약 13. 코드 최적화 13장에서는 모든 개발자가 알아야 할 최적화의 기본 규칙들을 살펴본다. 애플리케이션 성능 병목을 식별하는 방법과 일반적인 프로파일링 도구의 사용 방법에 관해 살펴본다. 병목을 식별한 뒤 여러 상 황에서 쉽게 적용할 수 있는 널리 이용되는 최적화 기법 및 전략에 관해 살펴본다. 기술적 요구 사항 나쁜 성능을 발생시키는 일반적인 요소들 코드 프로파일링 적절한 데이터 구조를 선택하여 복잡도 줄이기 아키텍처 트레이드오프 활용하기 요약 ","date":"December 26, 2022","hero":"/images/default-hero.jpg","permalink":"https://Ginger-Tec.github.io/posts/expert-python/00-contents-introduction/","summary":"전문가를 위한 파이썬 프로그래밍 제4판 지은이: 미하우 야보르스키\n10년 이상 다양한 프로그래밍 언어를 이용해 전문적으로 소프트웨어를 작성했다. 주로 웹 애플리케이션을 위한 고성능 분산 백엔드 서비스 코드를 만들었다. 소프트웨어 엔지니어에서 리드 소프트웨어 아키텍트까지 여러 기업에서 다양한 역할을 했다. 과거부터 지금까지 파이썬올 가장 선호한다.\n지은이: 타레크 지아데\n프랑스 부르고뉴에 거주하는 소프트웨어 엔지니어. 일래스틱 Elastic에서 개발자를 위한 도구를 만들고 있다. 이전에는 모질라에서 10여 년간 일했으며, 프랑스 파이썬 사용자 그룹인 AFPy를 설립했다. 다양한 잡지에 파이썬 관련 글을 기고했으며, 프랑스어와 영어로 여러 책을 집필했다.","tags":null,"title":"Contents Introduction"},{"categories":null,"contents":"","date":"December 26, 2022","hero":"/images/default-hero.jpg","permalink":"https://Ginger-Tec.github.io/posts/expert-python/01-present-of-python/","summary":"","tags":null,"title":"Contents Introduction"},{"categories":["Basic"],"contents":"Greeting! This is an introduction post. This post tests the followings:\nHero image is in the same directory as the post. This post should be at top of the sidebar. Post author should be the same as specified in author.yaml file. ","date":"June 8, 2020","hero":"/posts/introduction/hero.svg","permalink":"https://Ginger-Tec.github.io/posts/introduction/","summary":"Greeting! This is an introduction post. This post tests the followings:\nHero image is in the same directory as the post. This post should be at top of the sidebar. Post author should be the same as specified in author.yaml file. ","tags":["Basic","Multi-lingual"],"title":"Introduction"},{"categories":null,"contents":"This is a sample post intended to test the followings:\nA different post author. Table of contents. Markdown content rendering. Math rendering. Emoji rendering. Markdown Syntax Rendering Headings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Inline Markdown In Table italics bold strikethrough code Code Blocks Code block with backticks html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nMath Rendering Block math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\nEmoji Rendering 🙈 🙈 🙉 🙉 🙊 🙊\nThe above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"June 8, 2020","hero":"/posts/markdown-sample/hero.svg","permalink":"https://Ginger-Tec.github.io/posts/markdown-sample/","summary":"This is a sample post intended to test the followings:\nA different post author. Table of contents. Markdown content rendering. Math rendering. Emoji rendering. Markdown Syntax Rendering Headings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur?","tags":null,"title":"Markdown Samples"},{"categories":["Basic"],"contents":"This sample post tests the followings:\nCategory, sub-category nesting in the sidebar. Hero image and other images are in images folder inside this post directory. Different media rendering like image, tweet, YouTube video, Vimeo video etc. Image Sample Tweet Sample Owl bet you\u0026#39;ll lose this staring contest 🦉 pic.twitter.com/eJh4f2zncC\n\u0026mdash; San Diego Zoo Wildlife Alliance (@sandiegozoo) October 26, 2021 YouTube Video Sample Vimeo Video Sample ","date":"June 8, 2020","hero":"/posts/category/sub-category/rich-content/images/forest.jpg","permalink":"https://Ginger-Tec.github.io/posts/category/sub-category/rich-content/","summary":"This sample post tests the followings:\nCategory, sub-category nesting in the sidebar. Hero image and other images are in images folder inside this post directory. Different media rendering like image, tweet, YouTube video, Vimeo video etc. Image Sample Tweet Sample Owl bet you\u0026#39;ll lose this staring contest 🦉 pic.twitter.com/eJh4f2zncC\n\u0026mdash; San Diego Zoo Wildlife Alliance (@sandiegozoo) October 26, 2021 YouTube Video Sample Vimeo Video Sample ","tags":["Markdown","Content Organization","Multi-lingual"],"title":"Rich Content"},{"categories":null,"contents":"This is a sample post intended to test the followings:\nDefault hero image. Different shortcodes. Alert The following alerts are available in this theme.\nThis is sample alert with type=\u0026quot;success\u0026quot;. This is sample alert with type=\u0026quot;danger\u0026quot;. This is sample alert with type=\u0026quot;warning\u0026quot;. This is sample alert with type=\u0026quot;info\u0026quot;. This is sample alert with type=\u0026quot;dark\u0026quot;. This is sample alert with type=\u0026quot;primary\u0026quot;. This is sample alert with type=\u0026quot;secondary\u0026quot;. Image A sample image without any attribute. A sample image with height and width attributes. A center aligned image with height and width attributes. A image with float attribute. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras egestas lectus sed leo ultricies ultricies. Praesent tellus risus, eleifend vel efficitur ac, venenatis sit amet sem. Ut ut egestas erat. Fusce ut leo turpis. Morbi consectetur sed lacus vitae vehicula. Cras gravida turpis id eleifend volutpat. Suspendisse nec ipsum eu erat finibus dictum. Morbi volutpat nulla purus, vel maximus ex molestie id. Nullam posuere est urna, at fringilla eros venenatis quis.\nFusce vulputate dolor augue, ut porta sapien fringilla nec. Vivamus commodo erat felis, a sodales lectus finibus nec. In a pulvinar orci. Maecenas suscipit eget lorem non pretium. Nulla aliquam a augue nec blandit. Curabitur ac urna iaculis, ornare ligula nec, placerat nulla. Maecenas aliquam nisi vitae tempus vulputate.\nSplit This theme support splitting the page into as many columns as you wish.\nTwo column split Left Column Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras egestas lectus sed leo ultricies ultricies. Right Column Fusce ut leo turpis. Morbi consectetur sed lacus vitae vehicula. Cras gravida turpis id eleifend volutpat. Three column split Left Column Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras egestas lectus sed leo ultricies ultricies. Middle Column Aenean dignissim dictum ex. Donec a nunc vel nibh placerat interdum. Right Column Fusce ut leo turpis. Morbi consectetur sed lacus vitae vehicula. Cras gravida turpis id eleifend volutpat. Vertical Space Give vertical space between two lines.\nThis is line one. This is line two. It should have 4rem vertical space with previous line.\nVideo Video by Rahul Sharma from Pexels.\nMermaid Here, are few example of mermaid shortcode.\nGraph:\ngraph LR; A[Hard edge] --\u003e|Link text| B(Round edge) B --\u003e C{Decision} C --\u003e|One| D[Result one] C --\u003e|Two| E[Result two] Sequence Diagram:\nsequenceDiagram participant Alice participant Bob Alice-\u003e\u003eJohn: Hello John, how are you? loop Healthcheck John-\u003e\u003eJohn: Fight against hypochondria end Note right of John: Rational thoughts prevail! John--\u003e\u003eAlice: Great! John-\u003e\u003eBob: How about you? Bob--\u003e\u003eJohn: Jolly good! Gantt diagram:\ngantt dateFormat YYYY-MM-DD title Adding GANTT diagram to mermaid excludes weekdays 2014-01-10 section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d Class Diagram:\nclassDiagram Class01 \u003c|-- AveryLongClass : Cool Class03 *-- Class04 Class05 o-- Class06 Class07 .. Class08 Class09 --\u003e C2 : Where am i? Class09 --* C3 Class09 --|\u003e Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla Class08 \u003c--\u003e C2: Cool label Git Graph:\ngitGraph: options { \"nodeSpacing\": 150, \"nodeRadius\": 10 } end commit branch newbranch checkout newbranch commit commit checkout master commit commit merge newbranch ER Diagram:\nerDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses Gist ","date":"June 8, 2020","hero":"/posts/shortcodes/boat.jpg","permalink":"https://Ginger-Tec.github.io/posts/shortcodes/","summary":"This is a sample post intended to test the followings:\nDefault hero image. Different shortcodes. Alert The following alerts are available in this theme.\nThis is sample alert with type=\u0026quot;success\u0026quot;. This is sample alert with type=\u0026quot;danger\u0026quot;. This is sample alert with type=\u0026quot;warning\u0026quot;. This is sample alert with type=\u0026quot;info\u0026quot;. This is sample alert with type=\u0026quot;dark\u0026quot;. This is sample alert with type=\u0026quot;primary\u0026quot;. This is sample alert with type=\u0026quot;secondary\u0026quot;. Image A sample image without any attribute.","tags":null,"title":"Shortcodes Samples"}]